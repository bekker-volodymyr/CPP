#include <iostream>
#include <Windows.h> // Для функцій роботи з консоллю Windows (SetConsoleOutputCP, SetConsoleCP)
#include <ctime>     // Для функції time() (використовується для ініціалізації генератора випадкових чисел)
#include <cstdlib>   // Для функцій rand() і srand() (генерація випадкових чисел)

using namespace std;

int main()
{
    // Встановлення кодування консолі для коректного відображення українських символів.
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);

    // Ініціалізація генератора випадкових чисел.
    // time(NULL) повертає поточний час, що забезпечує різну послідовність чисел при кожному запуску.
    srand(time(NULL));

    // Створення динамічного двовимірного масиву (прямокутного)
    int size_x = 3; // Кількість рядків
    int size_y = 5; // Кількість стовпців

    // Виділення пам'яті для масиву покажчиків (перший "рівень" двовимірного масиву)
    // Кожен елемент arr_3x5 буде покажчиком на цілий масив (рядок).
    int** arr_3x5 = new int* [size_x];

    // Заповнення та виведення динамічного двовимірного масиву
    for (int i = 0; i < size_x; i++)
    {
        // Для кожного покажчика в arr_3x5 виділяємо пам'ять під внутрішній масив (рядок).
        arr_3x5[i] = new int[size_y];
        for (int j = 0; j < size_y; j++)
        {
            // Ініціалізація елементів випадковими числами від 0 до 9.
            arr_3x5[i][j] = rand() % 10;
            // Виведення елемента на екран.
            cout << arr_3x5[i][j] << " ";
        }
        cout << endl; // Перехід на новий рядок після кожного рядка масиву
    }

    // Очищення пам'яті, виділеної для двовимірного масиву.
    // Це КРИТИЧНО ВАЖЛИВО для уникнення витоків пам'яті (memory leaks).
    for (int i = 0; i < size_x; i++)
    {
        // Спочатку видаляємо кожен внутрішній масив (рядок).
        delete[] arr_3x5[i];
    }
    // Потім видаляємо масив покажчиків.
    delete[] arr_3x5;

    cout << endl << endl;

    // ---
    // Створення зубчастого (рваного) масиву (Ragged Array)
    // Це масив, де кожен "рядок" може мати різну довжину.

    int size_A;
    cout << "Введіть кількість масивів (рядків): ";
    cin >> size_A;

    // Масив покажчиків на інші масиви (рядки).
    int** A = new int* [size_A];
    // Масив для зберігання розмірів (довжин) кожного внутрішнього масиву.
    int* sizes = new int[size_A];

    // Заповнення зубчастого масиву
    for (int i = 0; i < size_A; i++) {
        int temp_size;
        cout << "Введіть розмір " << i + 1 << "-го масиву: "; // Додав i+1 для кращої читабельності
        cin >> temp_size;

        // Виділяємо пам'ять під поточний внутрішній масив з визначеним розміром.
        A[i] = new int[temp_size];
        // Зберігаємо розмір поточного масиву.
        sizes[i] = temp_size;
        for (int j = 0; j < temp_size; j++) {
            // Заповнюємо масив значеннями, які вводить користувач.
            int temp_value;
            cout << "Введіть значення " << j + 1 << "-го елементу " << i + 1 << "-го масиву: "; // Додав i+1, j+1
            cin >> temp_value;
            A[i][j] = temp_value;
        }
    }

    // Виведення зубчастого масиву
    cout << "\nЗубчастий масив:\n";
    for (int i = 0; i < size_A; i++) {
        for (int j = 0; j < sizes[i]; j++) {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }

    // Очищення пам'яті зубчастого масиву.
    // Спочатку видаляємо кожен внутрішній масив.
    for (int i = 0; i < size_A; i++) {
        delete[] A[i];
    }
    // Потім видаляємо масив покажчиків.
    delete[] A;
    // І також видаляємо масив, що зберігав розміри.
    delete[] sizes;

    cout << endl << endl;

    // ---
    // Тривимірний динамічний масив
    // Це більш складний випадок, де кожен "вимір" є покажчиком на наступний.

    cout << "Тривимірний динамічний масив" << endl;

    int size_i = 4; // Розмір по першому виміру
    int size_j = 2; // Розмір по другому виміру
    int size_z = 3; // Розмір по третьому виміру

    // Покажчик на масив покажчиків на покажчики :)
    // Це "перший шар" — масив, елементи якого вказують на "площини".
    int*** arr_4x2x3 = new int** [size_i];

    // Виділення пам'яті та заповнення тривимірного масиву
    for (int i = 0; i < size_i; i++)
    {
        // "Другий шар" — кожен елемент тепер є покажчиком на "рядок" покажчиків.
        arr_4x2x3[i] = new int* [size_j];
        for (int j = 0; j < size_j; j++)
        {
            // "Третій шар" — кожен елемент тепер є покажчиком на масив цілих чисел.
            arr_4x2x3[i][j] = new int[size_z];
            // Заповнюємо та виводимо елементи
            for (int z = 0; z < size_z; z++)
            {
                arr_4x2x3[i][j][z] = rand() % 10; // Заповнюємо випадковими числами
                cout << arr_4x2x3[i][j][z] << " ";
            }
            cout << endl; // Кінець "рядка" в третьому вимірі
        }
        cout << "--------" << endl; // Розділювач між "площинами"
    }

    // Звільнення пам'яті для тривимірного масиву.
    // Це найскладніша частина, потрібно видаляти "зсередини назовні".
    for (int i = 0; i < size_i; i++) {
        for (int j = 0; j < size_j; j++) {
            // Спочатку видаляємо найглибші масиви (масиви цілих чисел).
            delete[] arr_4x2x3[i][j];
        }
        // Потім видаляємо масиви покажчиків на масиви цілих чисел.
        delete[] arr_4x2x3[i];
    }
    // Нарешті, видаляємо найзовнішній масив покажчиків на покажчики.
    delete[] arr_4x2x3;

    return 0; // Завершення програми
}
