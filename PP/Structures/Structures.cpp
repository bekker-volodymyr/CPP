#include <iostream>

using namespace std;

// Структура для зберігання інформації про дату.
// Інформація зібрана в одному складовому типі.
struct date {
    int day;          
    int month;        
    int year;         
    int weekday;       
    char mon_name[15]; 
};

// Структура для зберігання інформації про людину.
// Включає в себе інші структури як члени.
struct person
{
    char name[50];    
    char address[50];  
    int zipcode[2];    // Поштовий індекс.
    int s_number[2];   
    int salary[4]; 
    date birthdate;    // Дата народження (використання структури 'date' як члена).
    date hiredate;     // Дата прийому на роботу (використання структури 'date' як члена).
};

// Структура для представлення точки на двовимірній площині.
struct point {
    int x; // Координата X
    int y; // Координата Y
};

// Функція для виведення інформації про дату.
// Приймає посилання на константний об'єкт 'date', щоб уникнути копіювання
// та гарантувати, що об'єкт не буде змінено всередині функції.
void PrintDate(const date& d)
{
    cout << d.day << "." << d.month << "." << d.year
         << ", " << d.weekday << ", " << d.mon_name << '\n';
}

int main()
{

    // Вкладена структура 'Test' для демонстрації вирівнювання даних.
    struct Test { // 8 байт - результат вирівнювання (залежить від компілятора/архітектури)
        char c; // 1 байт
        int i;  // 4 байти
    };

    Test d = { '#', 77 }; // Ініціалізація об'єкта структури
    cout << "Розмір структури Test: " << sizeof(Test) << "\n"
         << "Розмір об'єкта структури 'd': " << sizeof(d) << '\n';
    // Пояснення: Незважаючи на те, що char займає 1 байт, а int - 4 байти (разом 5 байт),
    // компілятор часто вирівнює поля структури за "природним" розміром, який дорівнює
    // найбільшому типу-члену (в даному випадку int - 4 байти) або розміру машинного слова.
    // Це робиться для оптимізації доступу до пам'яті. Тому 'sizeof(Test)' може бути 8 байт.

    cout << "\n--- Розміри типів даних та покажчиків ---\n";
    int value = 10;
    bool boolean = false;
    bool* ptr = &boolean; // Покажчик на boolean
    int arr[10];    

    cout << "Розмір змінної з типом int: " << sizeof(value) << '\n';       // Зазвичай 4 байти
    cout << "Розмір змінної з типом bool: " << sizeof(boolean) << '\n';     // 1 байт
    cout << "Розмір покажчика (будь-якого типу): " << sizeof(ptr) << '\n'; // Зазвичай 8 байт (залежить від архітектури)
    cout << "Розмір масиву типу int на 10 елементів: " << sizeof(arr) << '\n'; // 10 * sizeof(int) = 40 байт (якщо int=4)

    cout << "\n--- Робота зі структурою 'point' ---\n";
    point pa = { 12, 31 }; // Ініціалізація об'єкта 'pa'

    // Ініціалізація одного об'єкта іншим об'єктом.
    // Відбувається створення точної побітової копії.
    point pb = pa; // 'pb' тепер має значення x=12, y=31

    point p = { 10, 11 }; // Ініціалізація об'єкта 'p'

    cout << "Розмір об'єкта структури 'p': " << sizeof(p) << endl; // Зазвичай 8 байт (2 * sizeof(int))

    // Доступ до елементів структури через оператор крапки ('.')
    cout << "Значення p.x: " << p.x << '\n';
    
    // Отримання адреси об'єкта структури
    point* pp = &p; // 'pp' тепер вказує на об'єкт 'p'
    // Доступ до елемента структури через покажчик за допомогою оператора стрілки ('->')
    cout << "Значення pp->x (через покажчик): " << pp->x << '\n';

    cout << "\n--- Робота зі структурою 'date' ---\n";

    // Створення та ініціалізація об'єкта структури 'date'
    date myBirthday = { 20, 7, 1981, 1, "Липень" }; 

    // Зміна значення члена структури
    myBirthday.year = 1988;

    // Отримання та виведення даних члена структури
    cout << "Я народився " << myBirthday.day << " " << myBirthday.mon_name << " " << myBirthday.year << ".\n";

    // Виведення розміру структури 'date' (буде більшим через масив символів та вирівнювання)
    cout << "Розмір об'єкта структури 'myBirthday': " << sizeof(myBirthday) << endl;

    // Виклик функції для виведення дати, передаючи об'єкт структури за посиланням
    PrintDate(myBirthday);

    return 0; // Успішне завершення програми
}
